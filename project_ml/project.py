import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.feature_selection import SelectKBest, f_classif

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv('Titanic.csv')
print("–†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞:", df.shape)
print("\n–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:")
print(df.head())

# üìä EDA (Exploratory Data Analysis)
print("\n=== üìä EDA ===")

# 1. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
print("\n–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
print(df.isnull().sum().sort_values(ascending=False))

# 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏—Ö
plt.figure(figsize=(8, 5))
sns.countplot(x='Survived', data=df)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏—Ö (0 - –ü–æ–≥–∏–±, 1 - –í—ã–∂–∏–ª)')
plt.show()
print("\n–í—ã–≤–æ–¥: –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –Ω–µ –≤—ã–∂–∏–ª–æ.")

# 3. –í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –ø–æ–ª—É
plt.figure(figsize=(8, 5))
sns.barplot(x='Sex', y='Survived', data=df)
plt.title('–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∂–∏–≤—à–∏—Ö –ø–æ –ø–æ–ª—É')
plt.show()
print("\n–í—ã–≤–æ–¥: –ñ–µ–Ω—â–∏–Ω—ã –∏–º–µ–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ.")

# 4. –í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –∫–ª–∞—Å—Å—É –∫–∞—é—Ç—ã
plt.figure(figsize=(8, 5))
sns.barplot(x='Pclass', y='Survived', data=df)
plt.title('–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∂–∏–≤—à–∏—Ö –ø–æ –∫–ª–∞—Å—Å—É –∫–∞—é—Ç—ã')
plt.show()
print("\n–í—ã–≤–æ–¥: –ü–∞—Å—Å–∞–∂–∏—Ä—ã 1-–≥–æ –∫–ª–∞—Å—Å–∞ –∏–º–µ–ª–∏ –Ω–∞–∏–≤—ã—Å—à–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ.")

# 5. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
plt.figure(figsize=(10, 6))
sns.histplot(df['Age'].dropna(), bins=30, kde=True)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤')
plt.show()
print("\n–í—ã–≤–æ–¥: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –±—ã–ª–∏ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ 20-40 –ª–µ—Ç.")

# 6. –í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='Age', hue='Survived', bins=30, multiple='stack')
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ –≤—ã–∂–∏–≤—à–∏–º –∏ –ø–æ–≥–∏–±—à–∏–º')
plt.show()
print("\n–í—ã–≤–æ–¥: –î–µ—Ç–∏ –¥–æ 10 –ª–µ—Ç –∏–º–µ–ª–∏ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ.")

# 7. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
df['Sex_num'] = df['Sex'].map({'male': 0, 'female': 1})
numeric_features = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Sex_num']
corr_with_target = df[numeric_features + ['Survived']].corr()['Survived'].sort_values(ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x=corr_with_target.index, y=corr_with_target.values)
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å—é')
plt.xticks(rotation=45)
plt.show()
print("\n–í—ã–≤–æ–¥: –ü–æ–ª –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ –∏–º–µ—é—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å—é.")

# üë®‚Äçüíª Feature Engineering
print("\n=== üë®‚Äçüíª Feature Engineering ===")

# 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
df['FamilySize'] = df['SibSp'] + df['Parch'] + 1
df['IsAlone'] = (df['FamilySize'] == 1).astype(int)
df['Age*Class'] = df['Age'] * df['Pclass']
df['FarePerPerson'] = df['Fare'] / df['FamilySize']

# 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
df['Title'] = df['Name'].str.extract(r' ([A-Za-z]+)\.', expand=False)
df['Title'] = df['Title'].replace(
    ['Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')
df['Title'] = df['Title'].replace('Mlle', 'Miss')
df['Title'] = df['Title'].replace('Ms', 'Miss')
df['Title'] = df['Title'].replace('Mme', 'Mrs')

# 3. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
df['Age'] = df.groupby(['Pclass', 'Title'])['Age'].transform(lambda x: x.fillna(x.median()))
df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])
df['Fare'] = df['Fare'].fillna(df['Fare'].median())

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
new_features = ['FamilySize', 'IsAlone', 'Age*Class', 'FarePerPerson']
df_new = df.copy()
df_new['Sex'] = df_new['Sex'].map({'male': 0, 'female': 1})
df_new['Title'] = df_new['Title'].map({'Mr': 0, 'Miss': 1, 'Mrs': 2, 'Master': 3, 'Rare': 4})

print("\n–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å—é:")
print(df_new[new_features + ['Survived']].corr()['Survived'].sort_values(ascending=False))

# üë©‚Äçüéì –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
print("\n=== üë©‚Äçüéì –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===")

# –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'FamilySize', 'IsAlone', 'Title']
X = df[features]
y = df['Survived']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥
numeric_features = ['Age', 'SibSp', 'Parch', 'Fare', 'FamilySize']
categorical_features = ['Pclass', 'Sex', 'Embarked', 'IsAlone', 'Title']

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numeric_features),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ])

# üë©‚Äçüéì –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
print("\n=== üë©‚Äçüéì –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ===")

models = {
    "Logistic Regression": LogisticRegression(max_iter=1000, random_state=42),
    "Random Forest": RandomForestClassifier(random_state=42),
    "Gradient Boosting": GradientBoostingClassifier(random_state=42),
    "Neural Network": MLPClassifier(hidden_layer_sizes=(50, 25), max_iter=1000, random_state=42)
}

results = {}
cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

for name, model in models.items():
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
    pipeline = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('classifier', model)
    ])

    # –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
    cv_scores = cross_val_score(pipeline, X_train, y_train, cv=cv, scoring='accuracy')

    # –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º –Ω–∞–±–æ—Ä–µ
    pipeline.fit(X_train, y_train)
    y_pred = pipeline.predict(X_test)
    test_accuracy = accuracy_score(y_test, y_pred)

    results[name] = {
        'CV Mean Accuracy': cv_scores.mean(),
        'CV Std': cv_scores.std(),
        'Test Accuracy': test_accuracy
    }

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
results_df = pd.DataFrame(results).T.sort_values(by='CV Mean Accuracy', ascending=False)
print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
print(results_df)

# –í—ã–±–æ—Ä –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
best_model_name = results_df.index[0]
print(f"\n–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model_name}")

# –û–±—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
best_model = models[best_model_name]
final_pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', best_model)
])
final_pipeline.fit(X, y)

# –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
if hasattr(best_model, 'feature_importances_'):
    # –î–ª—è –º–æ–¥–µ–ª–µ–π —Å feature_importances_
    ohe_columns = list(final_pipeline.named_steps['preprocessor'].named_transformers_['cat'].get_feature_names_out(
        categorical_features))
    all_features = numeric_features + ohe_columns
    importances = pd.Series(best_model.feature_importances_, index=all_features)

    plt.figure(figsize=(12, 8))
    importances.sort_values().plot(kind='barh')
    plt.title('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
    plt.show()
elif hasattr(best_model, 'coef_'):
    # –î–ª—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    ohe_columns = list(final_pipeline.named_steps['preprocessor'].named_transformers_['cat'].get_feature_names_out(
        categorical_features))
    all_features = numeric_features + ohe_columns
    coefs = pd.Series(best_model.coef_[0], index=all_features)

    plt.figure(figsize=(12, 8))
    coefs.sort_values().plot(kind='barh')
    plt.title('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏')
    plt.show()

# –û—Ç—á–µ—Ç –ø–æ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
print("\n–û—Ç—á–µ—Ç –ø–æ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏:")
y_pred = final_pipeline.predict(X_test)
print(classification_report(y_test, y_pred))

# –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
print("\n–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:")
print(confusion_matrix(y_test, y_pred))

# –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
print("\n=== –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥ ===")
print("1. –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å:", best_model_name)
print(f"   - –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏: {results_df.loc[best_model_name, 'CV Mean Accuracy']:.3f}")
print(f"   - –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ: {results_df.loc[best_model_name, 'Test Accuracy']:.3f}")

print("\n2. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤—ã–∂–∏–≤–∞–Ω–∏—è:")
print("   - –ü–æ–ª (–∂–µ–Ω—â–∏–Ω—ã –∏–º–µ–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤)")
print("   - –ö–ª–∞—Å—Å –∫–∞—é—Ç—ã (1-–π –∫–ª–∞—Å—Å –∏–º–µ–ª –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ)")
print("   - –í–æ–∑—Ä–∞—Å—Ç (–¥–µ—Ç–∏ –≤—ã–∂–∏–≤–∞–ª–∏ —á–∞—â–µ)")
print("   - –†–∞–∑–º–µ—Ä —Å–µ–º—å–∏ (–æ–¥–∏–Ω–æ—á–∫–∏ –∏–º–µ–ª–∏ –º–µ–Ω—å—à–∏–µ —à–∞–Ω—Å—ã)")

print("\n3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:")
print("   - –ë–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ")
print("   - –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π")
print("   - –ü–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–µ–π")
print("   - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∫–∞—é—Ç)")